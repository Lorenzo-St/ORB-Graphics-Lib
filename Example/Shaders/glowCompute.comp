#version 430

struct glowSource
{
    vec2 pos;   // 8  |
    vec4 color; // 16 | 28, will be 32 bytes per source
    float intensity; // 4  | could potentially make color and intensity not be float
}; 
layout (local_size_x = 32, local_size_y = 32, local_size_z=1) in; 

layout (rgba32f) uniform image2D tex;

layout(location = 3)uniform vec2 fboCorner;
layout(location = 8)uniform float zoom;

layout(std430, binding=1) buffer sources
{
    glowSource boundSources[];
};

const int blockSizeX = 8;
const int blockSizeY = 4;
const float gamma = 0.00025;
const float intensityScale = 1.0 / 30.0;
void main()
{
    ivec2 p = ivec2(gl_GlobalInvocationID.xy) * ivec2(blockSizeX, blockSizeY);
    glowSource temp = boundSources[gl_GlobalInvocationID.z];
    temp.intensity *= intensityScale;   
    vec4 calculatedColors[blockSizeY * blockSizeX];
    // calculate the color for the pixel
    for(int y = 0;  y < blockSizeY; ++y)
    {
        for(int x = 0; x < blockSizeX; ++x)
        {
            ivec2 localPos = ivec2(p.x + x, p.y + y);
            vec2 pos = (localPos.xy * zoom) + fboCorner;
            vec2 dis = (temp.pos - pos);
            float inten = temp.intensity / dot(dis,dis);
            if(inten < gamma)
                return;
                int index = x + (blockSizeX * y);
            calculatedColors[index] = temp.color;
            calculatedColors[index].a *= inten;
            
        }
    }
    for(int y = 0;  y < blockSizeY; ++y)
    {
        for(int x = 0; x < blockSizeX; ++x)
        {
            ivec2 localPos = ivec2(p.x + x, p.y + y);
             int index = x + (blockSizeX * y);
             if(calculatedColors[index].a > imageLoad(tex, localPos).a)   
                imageStore(tex, localPos, clamp(calculatedColors[index], 0., 1.));
        }
    }
}